import { createApp, createRouter, defineEventHandler, toNodeListener, readBody } from "h3";
import { createServer } from "node:http";
import { Client, GatewayIntentBits, REST, Routes, AttachmentBuilder } from 'discord.js';
import axios from "axios";
import { DateTime } from "luxon";
import 'dotenv/config'
import { commands } from './commands.js';
import { birthdays } from './birthdays.js';

export const app = createApp();

const router = createRouter();
app.use(router);

const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });
client.login(process.env.TOKEN);


(async () => {
  try {
      console.log('Started refreshing application (/) commands.');
  
      await rest.put(Routes.applicationCommands(process.env.APPID), { body: commands });
  
      console.log('Successfully reloaded application (/) commands.');
  } catch (error) {
      console.error(error);  
  }
})();

client.on('ready', async () => {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;
    
  const dice = interaction.options.getString('dice') || 20;
  if (interaction.commandName === 'roll') {
    await interaction.reply(`${interaction.user.username} heitti D${dice} nopalla: ${roll(dice).result}`);
  }

});

const roll = dice => ({dice: dice, result: Math.floor(Math.random() * (dice - 1 + 1)) + 1});

router.post('/fingerpori', defineEventHandler( async event => {
    const body = await readBody(event)
    
    const formattedDate = DateTime.now().toFormat('dd_MM_yy');
    const channelid = body.channelid || '479199736776228865';
    const channel = await client.channels.fetch(channelid);

    const fingerpori = `http://fingerpori.org/wordpress/images/vwf${formattedDate}.gif`;

    const file = new AttachmentBuilder(fingerpori);

    channel.send({ files: [file] });

    return { message: {fingerpori: fingerpori} };
  }),
);

router.post('/birthday', defineEventHandler( async event => {
    const body = await readBody(event);
    
    const formattedDate = DateTime.now().toFormat('dd.MM');
    const channelid = body.channelid || '479199736776228865';
    const channel = await client.channels.fetch(channelid);

    const birthdaysToday = birthdays.filter(bd => bd.day === formattedDate);

    birthdaysToday.forEach(async bd => {
      const message = `Hyvää syntymäpäivää ${bd.name}!`;
      const res = await axios.get(`https://api.giphy.com/v1/gifs/search?api_key=${process.env.GIPHY_API_KEY}&q=happy+birthday&limit=10&offset=0&rating=r&lang=en&bundle=messaging_non_clips`)
        .then(res => {return res})
        .catch(err => console.error(err));
      const rnd = Math.floor(Math.random() * 10)
      const file = new AttachmentBuilder(res.data.data[rnd].images.original.url);
      channel.send(message);
      channel.send({ files: [file] });
    })

    return { message: {birthdays: birthdaysToday} };
  }),
);

router.post('/roll', defineEventHandler( async event => {
    const body = await readBody(event)

    const dice = body.dice || 20;
    const channelid = body.channelid || '479199736776228865';
    const user = body.name || 'unknown';
    const hidden = body.hidden || false;

    const rolled = {dice: dice, result: Math.floor(Math.random() * dice) + 1};

    const parseMessage = (user, roll) => (`${user} heitti D${roll.dice} nopalla: ${roll.result}`);
    const channel = await client.channels.fetch(channelid);
    channel.send(parseMessage(user, rolled));


    return { message: parseMessage(user, rolled) };

  }),
);

createServer(toNodeListener(app)).listen(8000);
